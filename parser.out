Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> repeat_loop
Rule 1     repeat_loop -> REPEAT statement_block
Rule 2     statement_block -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 3     statement_list -> statement SEMICOLON statement_list
Rule 4     statement_list -> statement SEMICOLON
Rule 5     statement_list -> if_statement
Rule 6     statement_list -> BREAK SEMICOLON
Rule 7     statement -> assignment
Rule 8     statement -> expression
Rule 9     assignment -> IDENTIFIER ASSIGN expression
Rule 10    if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement_block
Rule 11    expression -> literal
Rule 12    expression -> variable
Rule 13    expression -> binary_operation
Rule 14    expression -> unary_operation
Rule 15    literal -> NUMBER
Rule 16    literal -> STRING
Rule 17    literal -> TRUE
Rule 18    literal -> FALSE
Rule 19    variable -> IDENTIFIER
Rule 20    binary_operation -> expression binary_operator expression
Rule 21    unary_operation -> unary_operator expression
Rule 22    binary_operator -> PLUS
Rule 23    binary_operator -> MINUS
Rule 24    binary_operator -> TIMES
Rule 25    binary_operator -> DIVIDE
Rule 26    binary_operator -> POWER
Rule 27    binary_operator -> EQUALS
Rule 28    binary_operator -> NOT_EQUALS
Rule 29    binary_operator -> GREATER
Rule 30    binary_operator -> LESS
Rule 31    binary_operator -> GREATER_EQUAL
Rule 32    binary_operator -> LESS_EQUAL
Rule 33    binary_operator -> AND
Rule 34    binary_operator -> OR
Rule 35    unary_operator -> NOT
Rule 36    unary_operator -> MINUS

Terminals, with rules where they appear

AND                  : 33
ASSIGN               : 9
BREAK                : 6
DIVIDE               : 25
EQUALS               : 27
FALSE                : 18
GREATER              : 29
GREATER_EQUAL        : 31
IDENTIFIER           : 9 19
IF                   : 10
LEFT_BRACE           : 2
LEFT_PAREN           : 10
LESS                 : 30
LESS_EQUAL           : 32
MINUS                : 23 36
NOT                  : 35
NOT_EQUALS           : 28
NUMBER               : 15
OR                   : 34
PLUS                 : 22
POWER                : 26
REPEAT               : 1
RIGHT_BRACE          : 2
RIGHT_PAREN          : 10
SEMICOLON            : 3 4 6
STRING               : 16
TIMES                : 24
TRUE                 : 17
error                : 

Nonterminals, with rules where they appear

assignment           : 7
binary_operation     : 13
binary_operator      : 20
expression           : 8 9 10 20 20 21
if_statement         : 5
literal              : 11
repeat_loop          : 0
statement            : 3 4
statement_block      : 1 10
statement_list       : 2 3
unary_operation      : 14
unary_operator       : 21
variable             : 12

Parsing method: LALR

state 0

    (0) S' -> . repeat_loop
    (1) repeat_loop -> . REPEAT statement_block

    REPEAT          shift and go to state 2

    repeat_loop                    shift and go to state 1

state 1

    (0) S' -> repeat_loop .



state 2

    (1) repeat_loop -> REPEAT . statement_block
    (2) statement_block -> . LEFT_BRACE statement_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 4

    statement_block                shift and go to state 3

state 3

    (1) repeat_loop -> REPEAT statement_block .

    $end            reduce using rule 1 (repeat_loop -> REPEAT statement_block .)


state 4

    (2) statement_block -> LEFT_BRACE . statement_list RIGHT_BRACE
    (3) statement_list -> . statement SEMICOLON statement_list
    (4) statement_list -> . statement SEMICOLON
    (5) statement_list -> . if_statement
    (6) statement_list -> . BREAK SEMICOLON
    (7) statement -> . assignment
    (8) statement -> . expression
    (10) if_statement -> . IF LEFT_PAREN expression RIGHT_PAREN statement_block
    (9) assignment -> . IDENTIFIER ASSIGN expression
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    BREAK           shift and go to state 8
    IF              shift and go to state 11
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    statement_list                 shift and go to state 5
    statement                      shift and go to state 6
    if_statement                   shift and go to state 7
    assignment                     shift and go to state 9
    expression                     shift and go to state 10
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16
    unary_operator                 shift and go to state 21

state 5

    (2) statement_block -> LEFT_BRACE statement_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 24


state 6

    (3) statement_list -> statement . SEMICOLON statement_list
    (4) statement_list -> statement . SEMICOLON

    SEMICOLON       shift and go to state 25


state 7

    (5) statement_list -> if_statement .

    RIGHT_BRACE     reduce using rule 5 (statement_list -> if_statement .)


state 8

    (6) statement_list -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 26


state 9

    (7) statement -> assignment .

    SEMICOLON       reduce using rule 7 (statement -> assignment .)


state 10

    (8) statement -> expression .
    (20) binary_operation -> expression . binary_operator expression
    (22) binary_operator -> . PLUS
    (23) binary_operator -> . MINUS
    (24) binary_operator -> . TIMES
    (25) binary_operator -> . DIVIDE
    (26) binary_operator -> . POWER
    (27) binary_operator -> . EQUALS
    (28) binary_operator -> . NOT_EQUALS
    (29) binary_operator -> . GREATER
    (30) binary_operator -> . LESS
    (31) binary_operator -> . GREATER_EQUAL
    (32) binary_operator -> . LESS_EQUAL
    (33) binary_operator -> . AND
    (34) binary_operator -> . OR

    SEMICOLON       reduce using rule 8 (statement -> expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    POWER           shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER         shift and go to state 35
    LESS            shift and go to state 36
    GREATER_EQUAL   shift and go to state 37
    LESS_EQUAL      shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    binary_operator                shift and go to state 27

state 11

    (10) if_statement -> IF . LEFT_PAREN expression RIGHT_PAREN statement_block

    LEFT_PAREN      shift and go to state 41


state 12

    (9) assignment -> IDENTIFIER . ASSIGN expression
    (19) variable -> IDENTIFIER .

    ASSIGN          shift and go to state 42
    PLUS            reduce using rule 19 (variable -> IDENTIFIER .)
    MINUS           reduce using rule 19 (variable -> IDENTIFIER .)
    TIMES           reduce using rule 19 (variable -> IDENTIFIER .)
    DIVIDE          reduce using rule 19 (variable -> IDENTIFIER .)
    POWER           reduce using rule 19 (variable -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (variable -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 19 (variable -> IDENTIFIER .)
    GREATER         reduce using rule 19 (variable -> IDENTIFIER .)
    LESS            reduce using rule 19 (variable -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 19 (variable -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 19 (variable -> IDENTIFIER .)
    AND             reduce using rule 19 (variable -> IDENTIFIER .)
    OR              reduce using rule 19 (variable -> IDENTIFIER .)
    SEMICOLON       reduce using rule 19 (variable -> IDENTIFIER .)


state 13

    (11) expression -> literal .

    PLUS            reduce using rule 11 (expression -> literal .)
    MINUS           reduce using rule 11 (expression -> literal .)
    TIMES           reduce using rule 11 (expression -> literal .)
    DIVIDE          reduce using rule 11 (expression -> literal .)
    POWER           reduce using rule 11 (expression -> literal .)
    EQUALS          reduce using rule 11 (expression -> literal .)
    NOT_EQUALS      reduce using rule 11 (expression -> literal .)
    GREATER         reduce using rule 11 (expression -> literal .)
    LESS            reduce using rule 11 (expression -> literal .)
    GREATER_EQUAL   reduce using rule 11 (expression -> literal .)
    LESS_EQUAL      reduce using rule 11 (expression -> literal .)
    AND             reduce using rule 11 (expression -> literal .)
    OR              reduce using rule 11 (expression -> literal .)
    SEMICOLON       reduce using rule 11 (expression -> literal .)
    RIGHT_PAREN     reduce using rule 11 (expression -> literal .)


state 14

    (12) expression -> variable .

    PLUS            reduce using rule 12 (expression -> variable .)
    MINUS           reduce using rule 12 (expression -> variable .)
    TIMES           reduce using rule 12 (expression -> variable .)
    DIVIDE          reduce using rule 12 (expression -> variable .)
    POWER           reduce using rule 12 (expression -> variable .)
    EQUALS          reduce using rule 12 (expression -> variable .)
    NOT_EQUALS      reduce using rule 12 (expression -> variable .)
    GREATER         reduce using rule 12 (expression -> variable .)
    LESS            reduce using rule 12 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 12 (expression -> variable .)
    LESS_EQUAL      reduce using rule 12 (expression -> variable .)
    AND             reduce using rule 12 (expression -> variable .)
    OR              reduce using rule 12 (expression -> variable .)
    SEMICOLON       reduce using rule 12 (expression -> variable .)
    RIGHT_PAREN     reduce using rule 12 (expression -> variable .)


state 15

    (13) expression -> binary_operation .

    PLUS            reduce using rule 13 (expression -> binary_operation .)
    MINUS           reduce using rule 13 (expression -> binary_operation .)
    TIMES           reduce using rule 13 (expression -> binary_operation .)
    DIVIDE          reduce using rule 13 (expression -> binary_operation .)
    POWER           reduce using rule 13 (expression -> binary_operation .)
    EQUALS          reduce using rule 13 (expression -> binary_operation .)
    NOT_EQUALS      reduce using rule 13 (expression -> binary_operation .)
    GREATER         reduce using rule 13 (expression -> binary_operation .)
    LESS            reduce using rule 13 (expression -> binary_operation .)
    GREATER_EQUAL   reduce using rule 13 (expression -> binary_operation .)
    LESS_EQUAL      reduce using rule 13 (expression -> binary_operation .)
    AND             reduce using rule 13 (expression -> binary_operation .)
    OR              reduce using rule 13 (expression -> binary_operation .)
    SEMICOLON       reduce using rule 13 (expression -> binary_operation .)
    RIGHT_PAREN     reduce using rule 13 (expression -> binary_operation .)


state 16

    (14) expression -> unary_operation .

    PLUS            reduce using rule 14 (expression -> unary_operation .)
    MINUS           reduce using rule 14 (expression -> unary_operation .)
    TIMES           reduce using rule 14 (expression -> unary_operation .)
    DIVIDE          reduce using rule 14 (expression -> unary_operation .)
    POWER           reduce using rule 14 (expression -> unary_operation .)
    EQUALS          reduce using rule 14 (expression -> unary_operation .)
    NOT_EQUALS      reduce using rule 14 (expression -> unary_operation .)
    GREATER         reduce using rule 14 (expression -> unary_operation .)
    LESS            reduce using rule 14 (expression -> unary_operation .)
    GREATER_EQUAL   reduce using rule 14 (expression -> unary_operation .)
    LESS_EQUAL      reduce using rule 14 (expression -> unary_operation .)
    AND             reduce using rule 14 (expression -> unary_operation .)
    OR              reduce using rule 14 (expression -> unary_operation .)
    SEMICOLON       reduce using rule 14 (expression -> unary_operation .)
    RIGHT_PAREN     reduce using rule 14 (expression -> unary_operation .)


state 17

    (15) literal -> NUMBER .

    PLUS            reduce using rule 15 (literal -> NUMBER .)
    MINUS           reduce using rule 15 (literal -> NUMBER .)
    TIMES           reduce using rule 15 (literal -> NUMBER .)
    DIVIDE          reduce using rule 15 (literal -> NUMBER .)
    POWER           reduce using rule 15 (literal -> NUMBER .)
    EQUALS          reduce using rule 15 (literal -> NUMBER .)
    NOT_EQUALS      reduce using rule 15 (literal -> NUMBER .)
    GREATER         reduce using rule 15 (literal -> NUMBER .)
    LESS            reduce using rule 15 (literal -> NUMBER .)
    GREATER_EQUAL   reduce using rule 15 (literal -> NUMBER .)
    LESS_EQUAL      reduce using rule 15 (literal -> NUMBER .)
    AND             reduce using rule 15 (literal -> NUMBER .)
    OR              reduce using rule 15 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 15 (literal -> NUMBER .)
    RIGHT_PAREN     reduce using rule 15 (literal -> NUMBER .)


state 18

    (16) literal -> STRING .

    PLUS            reduce using rule 16 (literal -> STRING .)
    MINUS           reduce using rule 16 (literal -> STRING .)
    TIMES           reduce using rule 16 (literal -> STRING .)
    DIVIDE          reduce using rule 16 (literal -> STRING .)
    POWER           reduce using rule 16 (literal -> STRING .)
    EQUALS          reduce using rule 16 (literal -> STRING .)
    NOT_EQUALS      reduce using rule 16 (literal -> STRING .)
    GREATER         reduce using rule 16 (literal -> STRING .)
    LESS            reduce using rule 16 (literal -> STRING .)
    GREATER_EQUAL   reduce using rule 16 (literal -> STRING .)
    LESS_EQUAL      reduce using rule 16 (literal -> STRING .)
    AND             reduce using rule 16 (literal -> STRING .)
    OR              reduce using rule 16 (literal -> STRING .)
    SEMICOLON       reduce using rule 16 (literal -> STRING .)
    RIGHT_PAREN     reduce using rule 16 (literal -> STRING .)


state 19

    (17) literal -> TRUE .

    PLUS            reduce using rule 17 (literal -> TRUE .)
    MINUS           reduce using rule 17 (literal -> TRUE .)
    TIMES           reduce using rule 17 (literal -> TRUE .)
    DIVIDE          reduce using rule 17 (literal -> TRUE .)
    POWER           reduce using rule 17 (literal -> TRUE .)
    EQUALS          reduce using rule 17 (literal -> TRUE .)
    NOT_EQUALS      reduce using rule 17 (literal -> TRUE .)
    GREATER         reduce using rule 17 (literal -> TRUE .)
    LESS            reduce using rule 17 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 17 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 17 (literal -> TRUE .)
    AND             reduce using rule 17 (literal -> TRUE .)
    OR              reduce using rule 17 (literal -> TRUE .)
    SEMICOLON       reduce using rule 17 (literal -> TRUE .)
    RIGHT_PAREN     reduce using rule 17 (literal -> TRUE .)


state 20

    (18) literal -> FALSE .

    PLUS            reduce using rule 18 (literal -> FALSE .)
    MINUS           reduce using rule 18 (literal -> FALSE .)
    TIMES           reduce using rule 18 (literal -> FALSE .)
    DIVIDE          reduce using rule 18 (literal -> FALSE .)
    POWER           reduce using rule 18 (literal -> FALSE .)
    EQUALS          reduce using rule 18 (literal -> FALSE .)
    NOT_EQUALS      reduce using rule 18 (literal -> FALSE .)
    GREATER         reduce using rule 18 (literal -> FALSE .)
    LESS            reduce using rule 18 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 18 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 18 (literal -> FALSE .)
    AND             reduce using rule 18 (literal -> FALSE .)
    OR              reduce using rule 18 (literal -> FALSE .)
    SEMICOLON       reduce using rule 18 (literal -> FALSE .)
    RIGHT_PAREN     reduce using rule 18 (literal -> FALSE .)


state 21

    (21) unary_operation -> unary_operator . expression
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 44
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    unary_operator                 shift and go to state 21
    expression                     shift and go to state 43
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16

state 22

    (35) unary_operator -> NOT .

    NUMBER          reduce using rule 35 (unary_operator -> NOT .)
    STRING          reduce using rule 35 (unary_operator -> NOT .)
    TRUE            reduce using rule 35 (unary_operator -> NOT .)
    FALSE           reduce using rule 35 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 35 (unary_operator -> NOT .)
    NOT             reduce using rule 35 (unary_operator -> NOT .)
    MINUS           reduce using rule 35 (unary_operator -> NOT .)


state 23

    (36) unary_operator -> MINUS .

    NUMBER          reduce using rule 36 (unary_operator -> MINUS .)
    STRING          reduce using rule 36 (unary_operator -> MINUS .)
    TRUE            reduce using rule 36 (unary_operator -> MINUS .)
    FALSE           reduce using rule 36 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 36 (unary_operator -> MINUS .)
    NOT             reduce using rule 36 (unary_operator -> MINUS .)
    MINUS           reduce using rule 36 (unary_operator -> MINUS .)


state 24

    (2) statement_block -> LEFT_BRACE statement_list RIGHT_BRACE .

    $end            reduce using rule 2 (statement_block -> LEFT_BRACE statement_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 2 (statement_block -> LEFT_BRACE statement_list RIGHT_BRACE .)


state 25

    (3) statement_list -> statement SEMICOLON . statement_list
    (4) statement_list -> statement SEMICOLON .
    (3) statement_list -> . statement SEMICOLON statement_list
    (4) statement_list -> . statement SEMICOLON
    (5) statement_list -> . if_statement
    (6) statement_list -> . BREAK SEMICOLON
    (7) statement -> . assignment
    (8) statement -> . expression
    (10) if_statement -> . IF LEFT_PAREN expression RIGHT_PAREN statement_block
    (9) assignment -> . IDENTIFIER ASSIGN expression
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    RIGHT_BRACE     reduce using rule 4 (statement_list -> statement SEMICOLON .)
    BREAK           shift and go to state 8
    IF              shift and go to state 11
    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    statement                      shift and go to state 6
    statement_list                 shift and go to state 45
    if_statement                   shift and go to state 7
    assignment                     shift and go to state 9
    expression                     shift and go to state 10
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16
    unary_operator                 shift and go to state 21

state 26

    (6) statement_list -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 6 (statement_list -> BREAK SEMICOLON .)


state 27

    (20) binary_operation -> expression binary_operator . expression
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 44
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    expression                     shift and go to state 46
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16
    unary_operator                 shift and go to state 21

state 28

    (22) binary_operator -> PLUS .

    NUMBER          reduce using rule 22 (binary_operator -> PLUS .)
    STRING          reduce using rule 22 (binary_operator -> PLUS .)
    TRUE            reduce using rule 22 (binary_operator -> PLUS .)
    FALSE           reduce using rule 22 (binary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 22 (binary_operator -> PLUS .)
    NOT             reduce using rule 22 (binary_operator -> PLUS .)
    MINUS           reduce using rule 22 (binary_operator -> PLUS .)


state 29

    (23) binary_operator -> MINUS .

    NUMBER          reduce using rule 23 (binary_operator -> MINUS .)
    STRING          reduce using rule 23 (binary_operator -> MINUS .)
    TRUE            reduce using rule 23 (binary_operator -> MINUS .)
    FALSE           reduce using rule 23 (binary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 23 (binary_operator -> MINUS .)
    NOT             reduce using rule 23 (binary_operator -> MINUS .)
    MINUS           reduce using rule 23 (binary_operator -> MINUS .)


state 30

    (24) binary_operator -> TIMES .

    NUMBER          reduce using rule 24 (binary_operator -> TIMES .)
    STRING          reduce using rule 24 (binary_operator -> TIMES .)
    TRUE            reduce using rule 24 (binary_operator -> TIMES .)
    FALSE           reduce using rule 24 (binary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 24 (binary_operator -> TIMES .)
    NOT             reduce using rule 24 (binary_operator -> TIMES .)
    MINUS           reduce using rule 24 (binary_operator -> TIMES .)


state 31

    (25) binary_operator -> DIVIDE .

    NUMBER          reduce using rule 25 (binary_operator -> DIVIDE .)
    STRING          reduce using rule 25 (binary_operator -> DIVIDE .)
    TRUE            reduce using rule 25 (binary_operator -> DIVIDE .)
    FALSE           reduce using rule 25 (binary_operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 25 (binary_operator -> DIVIDE .)
    NOT             reduce using rule 25 (binary_operator -> DIVIDE .)
    MINUS           reduce using rule 25 (binary_operator -> DIVIDE .)


state 32

    (26) binary_operator -> POWER .

    NUMBER          reduce using rule 26 (binary_operator -> POWER .)
    STRING          reduce using rule 26 (binary_operator -> POWER .)
    TRUE            reduce using rule 26 (binary_operator -> POWER .)
    FALSE           reduce using rule 26 (binary_operator -> POWER .)
    IDENTIFIER      reduce using rule 26 (binary_operator -> POWER .)
    NOT             reduce using rule 26 (binary_operator -> POWER .)
    MINUS           reduce using rule 26 (binary_operator -> POWER .)


state 33

    (27) binary_operator -> EQUALS .

    NUMBER          reduce using rule 27 (binary_operator -> EQUALS .)
    STRING          reduce using rule 27 (binary_operator -> EQUALS .)
    TRUE            reduce using rule 27 (binary_operator -> EQUALS .)
    FALSE           reduce using rule 27 (binary_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 27 (binary_operator -> EQUALS .)
    NOT             reduce using rule 27 (binary_operator -> EQUALS .)
    MINUS           reduce using rule 27 (binary_operator -> EQUALS .)


state 34

    (28) binary_operator -> NOT_EQUALS .

    NUMBER          reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    STRING          reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    NOT             reduce using rule 28 (binary_operator -> NOT_EQUALS .)
    MINUS           reduce using rule 28 (binary_operator -> NOT_EQUALS .)


state 35

    (29) binary_operator -> GREATER .

    NUMBER          reduce using rule 29 (binary_operator -> GREATER .)
    STRING          reduce using rule 29 (binary_operator -> GREATER .)
    TRUE            reduce using rule 29 (binary_operator -> GREATER .)
    FALSE           reduce using rule 29 (binary_operator -> GREATER .)
    IDENTIFIER      reduce using rule 29 (binary_operator -> GREATER .)
    NOT             reduce using rule 29 (binary_operator -> GREATER .)
    MINUS           reduce using rule 29 (binary_operator -> GREATER .)


state 36

    (30) binary_operator -> LESS .

    NUMBER          reduce using rule 30 (binary_operator -> LESS .)
    STRING          reduce using rule 30 (binary_operator -> LESS .)
    TRUE            reduce using rule 30 (binary_operator -> LESS .)
    FALSE           reduce using rule 30 (binary_operator -> LESS .)
    IDENTIFIER      reduce using rule 30 (binary_operator -> LESS .)
    NOT             reduce using rule 30 (binary_operator -> LESS .)
    MINUS           reduce using rule 30 (binary_operator -> LESS .)


state 37

    (31) binary_operator -> GREATER_EQUAL .

    NUMBER          reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    STRING          reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    TRUE            reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    FALSE           reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    IDENTIFIER      reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    NOT             reduce using rule 31 (binary_operator -> GREATER_EQUAL .)
    MINUS           reduce using rule 31 (binary_operator -> GREATER_EQUAL .)


state 38

    (32) binary_operator -> LESS_EQUAL .

    NUMBER          reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    STRING          reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    IDENTIFIER      reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    NOT             reduce using rule 32 (binary_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 32 (binary_operator -> LESS_EQUAL .)


state 39

    (33) binary_operator -> AND .

    NUMBER          reduce using rule 33 (binary_operator -> AND .)
    STRING          reduce using rule 33 (binary_operator -> AND .)
    TRUE            reduce using rule 33 (binary_operator -> AND .)
    FALSE           reduce using rule 33 (binary_operator -> AND .)
    IDENTIFIER      reduce using rule 33 (binary_operator -> AND .)
    NOT             reduce using rule 33 (binary_operator -> AND .)
    MINUS           reduce using rule 33 (binary_operator -> AND .)


state 40

    (34) binary_operator -> OR .

    NUMBER          reduce using rule 34 (binary_operator -> OR .)
    STRING          reduce using rule 34 (binary_operator -> OR .)
    TRUE            reduce using rule 34 (binary_operator -> OR .)
    FALSE           reduce using rule 34 (binary_operator -> OR .)
    IDENTIFIER      reduce using rule 34 (binary_operator -> OR .)
    NOT             reduce using rule 34 (binary_operator -> OR .)
    MINUS           reduce using rule 34 (binary_operator -> OR .)


state 41

    (10) if_statement -> IF LEFT_PAREN . expression RIGHT_PAREN statement_block
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 44
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    expression                     shift and go to state 47
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16
    unary_operator                 shift and go to state 21

state 42

    (9) assignment -> IDENTIFIER ASSIGN . expression
    (11) expression -> . literal
    (12) expression -> . variable
    (13) expression -> . binary_operation
    (14) expression -> . unary_operation
    (15) literal -> . NUMBER
    (16) literal -> . STRING
    (17) literal -> . TRUE
    (18) literal -> . FALSE
    (19) variable -> . IDENTIFIER
    (20) binary_operation -> . expression binary_operator expression
    (21) unary_operation -> . unary_operator expression
    (35) unary_operator -> . NOT
    (36) unary_operator -> . MINUS

    NUMBER          shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IDENTIFIER      shift and go to state 44
    NOT             shift and go to state 22
    MINUS           shift and go to state 23

    expression                     shift and go to state 48
    literal                        shift and go to state 13
    variable                       shift and go to state 14
    binary_operation               shift and go to state 15
    unary_operation                shift and go to state 16
    unary_operator                 shift and go to state 21

state 43

    (21) unary_operation -> unary_operator expression .
    (20) binary_operation -> expression . binary_operator expression
    (22) binary_operator -> . PLUS
    (23) binary_operator -> . MINUS
    (24) binary_operator -> . TIMES
    (25) binary_operator -> . DIVIDE
    (26) binary_operator -> . POWER
    (27) binary_operator -> . EQUALS
    (28) binary_operator -> . NOT_EQUALS
    (29) binary_operator -> . GREATER
    (30) binary_operator -> . LESS
    (31) binary_operator -> . GREATER_EQUAL
    (32) binary_operator -> . LESS_EQUAL
    (33) binary_operator -> . AND
    (34) binary_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 21 (unary_operation -> unary_operator expression .)
    RIGHT_PAREN     reduce using rule 21 (unary_operation -> unary_operator expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    POWER           shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER         shift and go to state 35
    LESS            shift and go to state 36
    GREATER_EQUAL   shift and go to state 37
    LESS_EQUAL      shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! MINUS           [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! TIMES           [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! DIVIDE          [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! POWER           [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! EQUALS          [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! NOT_EQUALS      [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! GREATER         [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! LESS            [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! AND             [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]
  ! OR              [ reduce using rule 21 (unary_operation -> unary_operator expression .) ]

    binary_operator                shift and go to state 27

state 44

    (19) variable -> IDENTIFIER .

    PLUS            reduce using rule 19 (variable -> IDENTIFIER .)
    MINUS           reduce using rule 19 (variable -> IDENTIFIER .)
    TIMES           reduce using rule 19 (variable -> IDENTIFIER .)
    DIVIDE          reduce using rule 19 (variable -> IDENTIFIER .)
    POWER           reduce using rule 19 (variable -> IDENTIFIER .)
    EQUALS          reduce using rule 19 (variable -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 19 (variable -> IDENTIFIER .)
    GREATER         reduce using rule 19 (variable -> IDENTIFIER .)
    LESS            reduce using rule 19 (variable -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 19 (variable -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 19 (variable -> IDENTIFIER .)
    AND             reduce using rule 19 (variable -> IDENTIFIER .)
    OR              reduce using rule 19 (variable -> IDENTIFIER .)
    SEMICOLON       reduce using rule 19 (variable -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 19 (variable -> IDENTIFIER .)


state 45

    (3) statement_list -> statement SEMICOLON statement_list .

    RIGHT_BRACE     reduce using rule 3 (statement_list -> statement SEMICOLON statement_list .)


state 46

    (20) binary_operation -> expression binary_operator expression .
    (20) binary_operation -> expression . binary_operator expression
    (22) binary_operator -> . PLUS
    (23) binary_operator -> . MINUS
    (24) binary_operator -> . TIMES
    (25) binary_operator -> . DIVIDE
    (26) binary_operator -> . POWER
    (27) binary_operator -> . EQUALS
    (28) binary_operator -> . NOT_EQUALS
    (29) binary_operator -> . GREATER
    (30) binary_operator -> . LESS
    (31) binary_operator -> . GREATER_EQUAL
    (32) binary_operator -> . LESS_EQUAL
    (33) binary_operator -> . AND
    (34) binary_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 20 (binary_operation -> expression binary_operator expression .)
    RIGHT_PAREN     reduce using rule 20 (binary_operation -> expression binary_operator expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    POWER           shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER         shift and go to state 35
    LESS            shift and go to state 36
    GREATER_EQUAL   shift and go to state 37
    LESS_EQUAL      shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! MINUS           [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! TIMES           [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! DIVIDE          [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! POWER           [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! EQUALS          [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! NOT_EQUALS      [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! GREATER         [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! LESS            [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! LESS_EQUAL      [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! AND             [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]
  ! OR              [ reduce using rule 20 (binary_operation -> expression binary_operator expression .) ]

    binary_operator                shift and go to state 27

state 47

    (10) if_statement -> IF LEFT_PAREN expression . RIGHT_PAREN statement_block
    (20) binary_operation -> expression . binary_operator expression
    (22) binary_operator -> . PLUS
    (23) binary_operator -> . MINUS
    (24) binary_operator -> . TIMES
    (25) binary_operator -> . DIVIDE
    (26) binary_operator -> . POWER
    (27) binary_operator -> . EQUALS
    (28) binary_operator -> . NOT_EQUALS
    (29) binary_operator -> . GREATER
    (30) binary_operator -> . LESS
    (31) binary_operator -> . GREATER_EQUAL
    (32) binary_operator -> . LESS_EQUAL
    (33) binary_operator -> . AND
    (34) binary_operator -> . OR

    RIGHT_PAREN     shift and go to state 49
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    POWER           shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER         shift and go to state 35
    LESS            shift and go to state 36
    GREATER_EQUAL   shift and go to state 37
    LESS_EQUAL      shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    binary_operator                shift and go to state 27

state 48

    (9) assignment -> IDENTIFIER ASSIGN expression .
    (20) binary_operation -> expression . binary_operator expression
    (22) binary_operator -> . PLUS
    (23) binary_operator -> . MINUS
    (24) binary_operator -> . TIMES
    (25) binary_operator -> . DIVIDE
    (26) binary_operator -> . POWER
    (27) binary_operator -> . EQUALS
    (28) binary_operator -> . NOT_EQUALS
    (29) binary_operator -> . GREATER
    (30) binary_operator -> . LESS
    (31) binary_operator -> . GREATER_EQUAL
    (32) binary_operator -> . LESS_EQUAL
    (33) binary_operator -> . AND
    (34) binary_operator -> . OR

    SEMICOLON       reduce using rule 9 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 31
    POWER           shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER         shift and go to state 35
    LESS            shift and go to state 36
    GREATER_EQUAL   shift and go to state 37
    LESS_EQUAL      shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    binary_operator                shift and go to state 27

state 49

    (10) if_statement -> IF LEFT_PAREN expression RIGHT_PAREN . statement_block
    (2) statement_block -> . LEFT_BRACE statement_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 4

    statement_block                shift and go to state 50

state 50

    (10) if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement_block .

    RIGHT_BRACE     reduce using rule 10 (if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for POWER in state 43 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 43 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for OR in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for POWER in state 46 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
