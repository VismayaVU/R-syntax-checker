
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BREAK DIVIDE EQUALS FALSE GREATER GREATER_EQUAL IDENTIFIER IF LEFT_BRACE LEFT_PAREN LESS LESS_EQUAL MINUS NOT NOT_EQUALS NUMBER OR PLUS POWER REPEAT RIGHT_BRACE RIGHT_PAREN SEMICOLON STRING TIMES TRUErepeat_loop : REPEAT statement_blockstatement_block : LEFT_BRACE statement_list RIGHT_BRACEstatement_list : statement SEMICOLON statement_list\n                      | statement SEMICOLON\n                      | if_statement\n                      | BREAK SEMICOLONstatement : assignment\n                 | expressionassignment : IDENTIFIER ASSIGN expressionif_statement : IF LEFT_PAREN expression RIGHT_PAREN statement_blockexpression : literal \n                    | variable \n                    | binary_operation \n                    | unary_operationliteral : NUMBER \n                | STRING \n                | TRUE\n                | FALSEvariable : IDENTIFIERbinary_operation : expression binary_operator expressionunary_operation : unary_operator expressionbinary_operator : PLUS \n                        | MINUS \n                        | TIMES \n                        | DIVIDE \n                        | POWER \n                        | EQUALS \n                        | NOT_EQUALS \n                        | GREATER \n                        | LESS \n                        | GREATER_EQUAL \n                        | LESS_EQUAL \n                        | AND \n                        | ORunary_operator : NOT \n                        | MINUS'
    
_lr_action_items = {'REPEAT':([0,],[2,]),'$end':([1,3,24,],[0,-1,-2,]),'LEFT_BRACE':([2,49,],[4,4,]),'BREAK':([4,25,],[8,8,]),'IF':([4,25,],[11,11,]),'IDENTIFIER':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[12,44,-35,-36,12,44,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,44,44,]),'NUMBER':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[17,17,-35,-36,17,17,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,17,17,]),'STRING':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[18,18,-35,-36,18,18,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,18,18,]),'TRUE':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[19,19,-35,-36,19,19,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,19,19,]),'FALSE':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[20,20,-35,-36,20,20,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,20,20,]),'NOT':([4,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[22,22,-35,-36,22,22,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,22,22,]),'MINUS':([4,10,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,],[23,29,-19,-11,-12,-13,-14,-15,-16,-17,-18,23,-35,-36,23,23,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,23,23,29,-19,29,29,29,]),'RIGHT_BRACE':([5,7,24,25,26,45,50,],[24,-5,-2,-4,-6,-3,-10,]),'SEMICOLON':([6,8,9,10,12,13,14,15,16,17,18,19,20,43,44,46,48,],[25,26,-7,-8,-19,-11,-12,-13,-14,-15,-16,-17,-18,-21,-19,-20,-9,]),'PLUS':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[28,-19,-11,-12,-13,-14,-15,-16,-17,-18,28,-19,28,28,28,]),'TIMES':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[30,-19,-11,-12,-13,-14,-15,-16,-17,-18,30,-19,30,30,30,]),'DIVIDE':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[31,-19,-11,-12,-13,-14,-15,-16,-17,-18,31,-19,31,31,31,]),'POWER':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[32,-19,-11,-12,-13,-14,-15,-16,-17,-18,32,-19,32,32,32,]),'EQUALS':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[33,-19,-11,-12,-13,-14,-15,-16,-17,-18,33,-19,33,33,33,]),'NOT_EQUALS':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[34,-19,-11,-12,-13,-14,-15,-16,-17,-18,34,-19,34,34,34,]),'GREATER':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[35,-19,-11,-12,-13,-14,-15,-16,-17,-18,35,-19,35,35,35,]),'LESS':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[36,-19,-11,-12,-13,-14,-15,-16,-17,-18,36,-19,36,36,36,]),'GREATER_EQUAL':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[37,-19,-11,-12,-13,-14,-15,-16,-17,-18,37,-19,37,37,37,]),'LESS_EQUAL':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[38,-19,-11,-12,-13,-14,-15,-16,-17,-18,38,-19,38,38,38,]),'AND':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[39,-19,-11,-12,-13,-14,-15,-16,-17,-18,39,-19,39,39,39,]),'OR':([10,12,13,14,15,16,17,18,19,20,43,44,46,47,48,],[40,-19,-11,-12,-13,-14,-15,-16,-17,-18,40,-19,40,40,40,]),'LEFT_PAREN':([11,],[41,]),'ASSIGN':([12,],[42,]),'RIGHT_PAREN':([13,14,15,16,17,18,19,20,43,44,46,47,],[-11,-12,-13,-14,-15,-16,-17,-18,-21,-19,-20,49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'repeat_loop':([0,],[1,]),'statement_block':([2,49,],[3,50,]),'statement_list':([4,25,],[5,45,]),'statement':([4,25,],[6,6,]),'if_statement':([4,25,],[7,7,]),'assignment':([4,25,],[9,9,]),'expression':([4,21,25,27,41,42,],[10,43,10,46,47,48,]),'literal':([4,21,25,27,41,42,],[13,13,13,13,13,13,]),'variable':([4,21,25,27,41,42,],[14,14,14,14,14,14,]),'binary_operation':([4,21,25,27,41,42,],[15,15,15,15,15,15,]),'unary_operation':([4,21,25,27,41,42,],[16,16,16,16,16,16,]),'unary_operator':([4,21,25,27,41,42,],[21,21,21,21,21,21,]),'binary_operator':([10,43,46,47,48,],[27,27,27,27,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> repeat_loop","S'",1,None,None,None),
  ('repeat_loop -> REPEAT statement_block','repeat_loop',2,'p_repeat_loop','tempCodeRunnerFile.py',66),
  ('statement_block -> LEFT_BRACE statement_list RIGHT_BRACE','statement_block',3,'p_statement_block','tempCodeRunnerFile.py',69),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','tempCodeRunnerFile.py',72),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','tempCodeRunnerFile.py',73),
  ('statement_list -> if_statement','statement_list',1,'p_statement_list','tempCodeRunnerFile.py',74),
  ('statement_list -> BREAK SEMICOLON','statement_list',2,'p_statement_list','tempCodeRunnerFile.py',75),
  ('statement -> assignment','statement',1,'p_statement','tempCodeRunnerFile.py',78),
  ('statement -> expression','statement',1,'p_statement','tempCodeRunnerFile.py',79),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','tempCodeRunnerFile.py',82),
  ('if_statement -> IF LEFT_PAREN expression RIGHT_PAREN statement_block','if_statement',5,'p_if_statement','tempCodeRunnerFile.py',85),
  ('expression -> literal','expression',1,'p_expression','tempCodeRunnerFile.py',88),
  ('expression -> variable','expression',1,'p_expression','tempCodeRunnerFile.py',89),
  ('expression -> binary_operation','expression',1,'p_expression','tempCodeRunnerFile.py',90),
  ('expression -> unary_operation','expression',1,'p_expression','tempCodeRunnerFile.py',91),
  ('literal -> NUMBER','literal',1,'p_literal','tempCodeRunnerFile.py',94),
  ('literal -> STRING','literal',1,'p_literal','tempCodeRunnerFile.py',95),
  ('literal -> TRUE','literal',1,'p_literal','tempCodeRunnerFile.py',96),
  ('literal -> FALSE','literal',1,'p_literal','tempCodeRunnerFile.py',97),
  ('variable -> IDENTIFIER','variable',1,'p_variable','tempCodeRunnerFile.py',100),
  ('binary_operation -> expression binary_operator expression','binary_operation',3,'p_binary_operation','tempCodeRunnerFile.py',103),
  ('unary_operation -> unary_operator expression','unary_operation',2,'p_unary_operation','tempCodeRunnerFile.py',106),
  ('binary_operator -> PLUS','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',109),
  ('binary_operator -> MINUS','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',110),
  ('binary_operator -> TIMES','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',111),
  ('binary_operator -> DIVIDE','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',112),
  ('binary_operator -> POWER','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',113),
  ('binary_operator -> EQUALS','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',114),
  ('binary_operator -> NOT_EQUALS','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',115),
  ('binary_operator -> GREATER','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',116),
  ('binary_operator -> LESS','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',117),
  ('binary_operator -> GREATER_EQUAL','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',118),
  ('binary_operator -> LESS_EQUAL','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',119),
  ('binary_operator -> AND','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',120),
  ('binary_operator -> OR','binary_operator',1,'p_binary_operator','tempCodeRunnerFile.py',121),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','tempCodeRunnerFile.py',124),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','tempCodeRunnerFile.py',125),
]
